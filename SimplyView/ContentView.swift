import SwiftUI                   // SwiftUI „Çí‰Ωø„Å£„Å¶ UI „ÇíÊßãÁØâ„Åó„Åæ„Åô
import AppKit                    // macOS Âõ∫Êúâ„ÅÆ AppKit Ê©üËÉΩ„Çí‰ΩøÁî®„Åó„Åæ„Åô

// MARK: ContentView SwiftUI„ÅÆ„É°„Ç§„É≥
struct ContentView: View {
    //„É¢„Éá„É´ÔºàÁîªÂÉè‰∏ÄË¶ß„ÇÑÁä∂ÊÖãÔºâ„ÇíÁõ£Ë¶ñ
    @ObservedObject var model: ImageViewerModel
    //PageController„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„Çπ‰øùÊåÅÁî®Ôºà„Éì„É•„Éº„ÅÆÂÜçÊßãÁØâ„ÇíÈÅø„Åë„ÇãÔºâ
    private let holder = PageControllerView.ControllerHolder()
    //Ë°®Á§∫ÂÜÖÂÆπ„ÅÆÂº∑Âà∂„É™„Éï„É¨„ÉÉ„Ç∑„É•Áî®„Éê„Ç§„É≥„Éá„Ç£„É≥„Ç∞
    @Binding var viewerID: UUID
    
    //@State private var showSettings = false
    @Binding var showSettings: Bool
    
    //ÁîªÈù¢ÊßãÊàê
    var body: some View {
        // ÂÖ®‰Ωì„ÇíÁ∏¶ÊñπÂêë„Å´Á©ç„ÇÄÔºà‰ΩôÁôΩ3ptÔºâ
        VStack(spacing: 3) {
            // --- „Éò„ÉÉ„ÉÄ„Éº„Ç®„É™„Ç¢Ôºà„Éï„Ç©„É´„ÉÄÈÅ∏Êäû + „Çµ„É†„Éç„Ç§„É´ + „Ç§„É≥„Ç∏„Ç±„Éº„ÇøÔºâ
            HStack(spacing: 6) {
                // --- „Éï„Ç©„É´„ÉÄÈÅ∏Êäû„Éú„Çø„É≥
                Button("FolderSelect") {
                    // macOS „ÅÆÊ®ôÊ∫ñ„Éï„Ç©„É´„ÉÄÈÅ∏Êäû„ÉÄ„Ç§„Ç¢„É≠„Ç∞
                    let panel = NSOpenPanel()
                    panel.canChooseDirectories = true
                    panel.canChooseFiles = false
                    panel.allowsMultipleSelection = false
                    panel.prompt = "Select"
                    
                    if panel.runModal() == .OK, let url = panel.url {
                        //Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„ÉàÔºàË°®Á§∫ÁîªÂÉè„Éª„Çπ„Ç±„Éº„É´„Éª„Ç™„Éï„Çª„ÉÉ„ÉàÔºâ
                        model.currentIndex = 0
                        model.scale = 1.0
                        model.offset = .zero
                        //model.anchorPoint = CGPoint(x: 0.5, y: 0.5)
                        //ÁîªÂÉèË™≠„ÅøËæº„ÅøÔºàÈùûÂêåÊúü„Åß„Çµ„É†„Éç„Ç§„É´„ÇÇÁîüÊàêÔºâ
                        model.loadImagesFromDirectory(url)
                        //viewerID„ÇíÊõ¥Êñ∞„Åó„Å¶PageController„Çí„É™„Éï„É¨„ÉÉ„Ç∑„É•
                        //viewerID = UUID()
                    }
                }
                // macOSÈ¢®Â∞è„Çµ„Ç§„Ç∫„Éú„Çø„É≥
                .controlSize(.small)
                // Ê®™ÂπÖ„ÇíÁõ¥Êé•ÊåáÂÆö
                .frame(width: 85)
                
                // --- „Çµ„É†„Éç„Ç§„É´Ë°®Á§∫„Ç®„É™„Ç¢
                if !model.images.isEmpty {
                    ScrollViewReader { scrollProxy in
                        ScrollView(.horizontal, showsIndicators: false) {
                            HStack(spacing: 6) {
                                // ÂÖ®ÁîªÂÉè„ÇíÂàóÊåô
                                ForEach(Array(model.images.enumerated()), id: \.offset) { index, url in
                                    let isSelected = (index == model.currentIndex)
                                    
                                    if let thumb = model.thumbnail(for: url) {
                                        //„Çµ„É†„Éç„Ç§„É´Ë°®Á§∫ÔºàÈÅ∏ÊäûÊôÇ„ÅØÈùíÊû†Ôºâ
                                        Image(nsImage: thumb)
                                            .resizable()
                                            .aspectRatio(contentMode: .fill)
                                            .frame(width: 40, height: 40)
                                            .clipped()
                                            .cornerRadius(4)
                                            .overlay(
                                                RoundedRectangle(cornerRadius: 4)
                                                    .stroke(isSelected ? Color.blue : Color.clear, lineWidth: 2)
                                            )
                                            //„Çπ„ÇØ„É≠„Éº„É´Áî®ID
                                            .id(index)
                                            .onTapGesture {
                                                model.currentIndex = index
                                                //ÈÅ∏ÊäûÊôÇ„Å´„Çπ„ÇØ„É≠„Éº„É´„Çª„É≥„Çø„Éº„Å∏
                                                withAnimation {
                                                    scrollProxy.scrollTo(index, anchor: .center)
                                                }
                                            }
                                    } else {
                                        //„Çµ„É†„Éç„Ç§„É´Êú™ÁîüÊàêÊôÇ„ÅÆ„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ
                                        Rectangle()
                                            .fill(Color.gray.opacity(0.1))
                                            .frame(width: 40, height: 40)
                                            .cornerRadius(4)
                                            .id(index)
                                    }
                                }
                            }
                        }
                        .frame(height: 42)
                        .onChange(of: model.currentIndex) { oldIndex, newIndex in
                            // currentIndex „ÅåÂ§âÂåñ„Åó„ÅüÁû¨Èñì
                            withAnimation {
                                scrollProxy.scrollTo(newIndex, anchor: .center)
                            }
                        }
                    }
                }
                
                // --- Á∑èÁîªÂÉèÊï∞ „ÅÆË°®Á§∫„Ç®„É™„Ç¢
                Text(model.images.isEmpty
                     ? "NO image"
                     : "\(model.currentIndex + 1) / \(model.images.count)")
                .font(.caption)
                .controlSize(.small)
                
                // --- Ë¶ãÈñã„ÅçË°®Á§∫„É¢„Éº„Éâ„ÇíÂàá„ÇäÊõø„Åà„Éú„Çø„É≥
                Button(action: {
                    let idx = model.currentIndex
                    guard idx > 0 else { return }
                    let current = model.images[idx]
                    let previous = model.images[idx - 1]
                    if let combined = model.makeSpreadImage(current: current, next: previous) {
                        //ÁîªÂÉè„Çí‰∏äÊõ∏„Åç
                        model.overrideImage(for: current, with: combined)
                        //SwiftUIÂÅ¥„Åã„ÇâView„ÇíÂÜçÁîüÊàê
                        viewerID = UUID()
                    }
                }) {
                    Text("üìñ")
                }
                .controlSize(.small)
                .help("This image will be temporarily displayed in a two-page spread.")
            }
            .padding(.horizontal, 8)
            .padding(.vertical, 4)
            .frame(minHeight: 28)
            
            // --- „É°„Ç§„É≥ÁîªÂÉèË°®Á§∫„Ç®„É™„Ç¢
            if model.images.isEmpty {
                //ÁîªÂÉè„Å™„Åó„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
                Text("Image not loaded.")
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                    .foregroundColor(.secondary)
            } else {
                ZStack {
                    //ÁîªÂÉè„ÅÆ„Éö„Éº„Ç∏„É≥„Ç∞Ë°®Á§∫ÔºàNSPageControllerÔºâ
                    PageControllerView(model: model, holder: holder)
                    //„Ç≠„Éº„Éú„Éº„ÉâÂØæÂøúÔºà‚Üê ‚Üí „ÅßÂâçÂæåÁîªÂÉèÔºâ
                    KeyboardHandlingRepresentable(holder: holder, model: model)
                        .allowsHitTesting(false)
                    //„Ç¶„Ç£„É≥„Éâ„Ç¶„É™„Çµ„Ç§„Ç∫„ÇíÊ§úÂá∫„Åó„Å¶ viewerID „ÇíÊõ¥Êñ∞
                    WindowResizeObserver {
                        //„É™„Çµ„Ç§„Ç∫ÁµÇ‰∫ÜÂæå„Å´‰∏ÄÂ∫¶„Å†„ÅëÂÜçÊßãÁØâ
                        viewerID = UUID()
                        //print("„É™„Çµ„Ç§„Ç∫ÁµÇ‰∫ÜÂæå„Å´‰∏ÄÂ∫¶„Å†„ÅëÂÜçÊßãÁØâ")
                    }
                    .frame(width: 0, height: 0)
                }
                //viewerIDÂ§âÊõ¥„ÅßView„ÇíÂº∑Âà∂Êõ¥Êñ∞
                .id(viewerID)
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            }
        }
        .sheet(isPresented: $showSettings) {
            SettingsView(model: model)
        }
        // „Ç¶„Ç£„É≥„Éâ„Ç¶ÊúÄÂ∞è„Çµ„Ç§„Ç∫
        .frame(minWidth: 600, minHeight: 400)
    }
}

extension Array {
    subscript(safe index: Int) -> Element? {
        return indices.contains(index) ? self[index] : nil
    }
}

struct SettingsView: View {
    @ObservedObject var model: ImageViewerModel
    @AppStorage("reverseSpread") var reverseSpread = false
    @AppStorage("reverseArrowKeys") var reverseKeyboard = false
    @Environment(\.dismiss) var dismiss
    
    var body: some View {
        VStack(alignment: .leading, spacing: 20) {
            Text("Settings")
                .font(.title2)
                .bold()
            
            Divider()
            
            // „Åì„Åì„Çí HStack „Å´„Åó„Å¶Ê®™‰∏¶„Å≥„Å´
            HStack(alignment: .top, spacing: 20) {
                GroupBox(label: Text("How to Use")) {
                    VStack(alignment: .leading, spacing: 6) {
                        
                        VStack(alignment: .leading, spacing: 6) {
                            Text("„Éª‚Üê / ‚Üí: Show previous/next image")
                            Text("„ÉªRight to go forward, left to go back (can be reversed)")
                            Text("„ÉªMouse drag: Move the image")
                            Text("„ÉªDouble click: Zoom (2x, 4x, reset)")
                            Text("„Éª[üìñ] moves the previous image to the right Displays the current image on the left (can be reversed) Will be canceled when you move forward/backward")
                            Text("„ÉªUse [Select] to load a file in one of the formats below")
                            Text("  Load file Supported formats: jpg, jpeg, png, gif, bmp, webp")

                            
                        }
                        .font(.system(size: 13))
                        .padding(.vertical, 5)
                        
                        
                    }
                    .font(.system(size: 13))
                    .padding(.vertical, 5)
                }
                .frame(maxWidth: .infinity)
                
                GroupBox(label: Text("Options")) {
                    VStack(alignment: .leading, spacing: 8) {
                        Toggle("Reverse ‚Üê ‚Üí arrow key direction", isOn: $reverseKeyboard)
                        Toggle("Display page spread left-right reversed", isOn: $reverseSpread)
                    }
                    .padding(.top, 4)
                }
                .frame(maxWidth: .infinity)
            }
            .padding(.horizontal)
            
            //Spacer()
            
            HStack {
                Spacer()
                Button("close") { dismiss() }
                    .keyboardShortcut(.defaultAction)
            }
        }
        .padding()
        // 2„Ç´„É©„É†„ÇíÊÉ≥ÂÆö„Åó„Å¶ÂçÅÂàÜ„Å™ÂπÖ„ÇíÊåáÂÆö
        .frame(width: 650, height: 465)
    }
}
